(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{250:function(n,e,t){"use strict";t.r(e);var a=t(2),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"乒乓圈小程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#乒乓圈小程序","aria-hidden":"true"}},[n._v("#")]),n._v(" 乒乓圈小程序")]),n._v(" "),t("p",[n._v("和朋友合伙写了一个小程序，写了一个以共享乒乓信息和交流的平台———乒乓圈。我们使用了微信的云开发来完成数据和后台的作用。免去了租赁服务器。")]),n._v(" "),t("p",[n._v("我主要负责的是数据库的设计和云函数实现数据获取和触发器的功能和简单的两个页面。")]),n._v(" "),t("h1",{attrs:{id:"正文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文","aria-hidden":"true"}},[n._v("#")]),n._v(" 正文")]),n._v(" "),t("h2",{attrs:{id:"页面分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 页面分析")]),n._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"引导页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引导页","aria-hidden":"true"}},[n._v("#")]),n._v(" 引导页")])])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567584710029_6709u8ca8y8.png/0",alt:""}})]),n._v(" "),t("p",[n._v("当用户未授权则会弹出，点击下方指纹图片，则会弹出授权框，授权后，如果未注册则会注册完毕后进入首页")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/remote/1460000019646155?w=1092&h=2260",alt:""}})]),n._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"tabbar中的三个模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tabbar中的三个模块","aria-hidden":"true"}},[n._v("#")]),n._v(" tabbar中的三个模块")])])]),n._v(" "),t("p",[n._v("三个模块分别为 首页、圈友、个人 模块。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567648892824_5s1rkbh87o5.png/0",alt:""}})]),n._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"首页的三个功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首页的三个功能","aria-hidden":"true"}},[n._v("#")]),n._v(" 首页的三个功能")])])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("同城圈\n-- 同城圈可以看到共享的球馆，点击加号就可共享球馆")])]),n._v(" "),t("li",[t("p",[n._v("签到\n-- 签到规则可以增加积分")])]),n._v(" "),t("li",[t("p",[n._v("排行榜\n-- 可以看积分排行榜")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567584790734_pde35xfosll.png/0",alt:""}})])])]),n._v(" "),t("p",[t("strong",[n._v("页面流程大致分为")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("- 引导页\n    - 首页\n        - 同城圈\n        - 打卡\n        - 榜单\n    - 圈友页\n        - 同城圈友\n        - 留言列表\n    - 个人页\n        - 个人资料\n")])])]),t("h2",{attrs:{id:"数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库","aria-hidden":"true"}},[n._v("#")]),n._v(" 数据库")]),n._v(" "),t("p",[n._v("从以上的功能出发我的数据库设计思路如此\n对象有以下几个：")]),n._v(" "),t("ul",[t("li",[n._v("个人")]),n._v(" "),t("li",[n._v("球馆")]),n._v(" "),t("li",[n._v("对话")])]),n._v(" "),t("p",[n._v("对象就只有大致三个，但是为了数据操作的简便性我将个人的信息分成两个对象表，将留言中的对话又单独放出一张表，所以最后的表有为一下几个：")]),n._v(" "),t("ul",[t("li",[n._v("个人基础信息")]),n._v(" "),t("li",[n._v("个人详细信息(乒乓球相关)")]),n._v(" "),t("li",[n._v("球馆")]),n._v(" "),t("li",[n._v("对话")]),n._v(" "),t("li",[n._v("留言信息")])]),n._v(" "),t("p",[t("strong",[n._v("对象属性的类型选择")])]),n._v(" "),t("p",[n._v("首先，小程序提供的数据库是基于mangoDB的面向对象数据库，区别于一般的关系数据库如：mysql等。二者之间的区别和我的理解会写在总结中。")]),n._v(" "),t("p",[n._v("信息是反映对象状态的一种")]),n._v(" "),t("p",[n._v("我认为数据库存储的属性大致可分为三种")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("基础信息数据")]),n._v("\n-- 是需要存储的基础数据，无需任何处理可直接输出的数据，例如：姓名等")]),n._v(" "),t("li",[t("strong",[n._v("功能性数据")]),n._v("\n-- 是可能需要一定处理转变，表示的数据，例如：会员等级(vip,svip)")]),n._v(" "),t("li",[t("strong",[n._v("标记型数据")]),n._v("\n-- 是一种特殊的标记，例如：唯一标识符(openId)等")])]),n._v(" "),t("p",[n._v("但是很多信息都兼顾以上的几种，例如：学号(即是标记型，又是基础信息)")]),n._v(" "),t("p",[n._v("确认完对象基础属性后就要考虑对象之间的关系，例如人和对话，留言和对话信息。\n关系种类有 一对一(1-1)，一对多(1-n)，多对多(m-n)。")]),n._v(" "),t("p",[n._v("在 "),t("strong",[n._v("关系数据库")]),n._v(" 中，"),t("strong",[n._v("一对一")]),n._v("的关系只要在一条记录中添加一个属性即可，例如：个人信息和个人详情，在个人详情中添加个人的唯一表示符字段；\n"),t("strong",[n._v("一对多")]),n._v("的关系中需要在多数的记录中添加一个属性，或者单独建立一张表来存储关系，\n例如：个人和物品，第一种在物品对象中添加一个所有者对象，或者建立一个所属关系表；\n"),t("strong",[n._v("多对多")]),n._v("的关系则只能通过单独一张关系表来完成，例如：学生和课程，需要单独一张选课表来表示关系。")]),n._v(" "),t("p",[n._v("在 "),t("strong",[n._v("面向对象数据库")]),n._v("中"),t("strong",[n._v("一对多")]),n._v("和"),t("strong",[n._v("多对多")]),n._v("的关系可以通过对象中的一个数组字段来完成，例如：学生和课程，在学生对象中添加一个所选课程字段存储课程 ID ，在课程中添加选课学生字段存储学号，就完成了多对多的关系链接。")]),n._v(" "),t("h3",{attrs:{id:"对象结构如下所示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象结构如下所示","aria-hidden":"true"}},[n._v("#")]),n._v(" 对象结构如下所示")]),n._v(" "),t("h4",{attrs:{id:"个人基础信息："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人基础信息：","aria-hidden":"true"}},[n._v("#")]),n._v(" 个人基础信息：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('openId:{type:String}//openId主键\nname:{type:String}//名字，默认为微信名\navatarUrl:{type:String}//头像，默认微信头像\ncontext:{type:String,default:"这个人很懒什么都没留下"}//个人简介\n//以下几项应为流水数据应但对放一张表，在此为图简便放入基础信息表\nintergal:{type:Number,default:0}//积分 用来排名和升级\nlevel:{type:String,default:"新人"}//等级\nsign:{type:Array,default:[]}//记录打卡签到的日期\nmonth:{type:Number}//记录上次打卡签到的月份，用于每月清空签到表\n')])])]),t("h4",{attrs:{id:"个人详情-乒乓球相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人详情-乒乓球相关","aria-hidden":"true"}},[n._v("#")]),n._v(" 个人详情(乒乓球相关)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("openId:{type:String}//openId主键\nyears:{type:String}//球龄\nphone:{type:Array}//电话\nbat:{type:String}//球拍\nboard:{type:String}//底板\ncontext:{type:String}//正面胶皮\nintergal:{type:Number,default:0}//反面胶皮\n")])])]),t("h4",{attrs:{id:"球馆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#球馆","aria-hidden":"true"}},[n._v("#")]),n._v(" 球馆")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("id:{type:String}//主键，由数据库自动生成\naddress:{type:String}//地址\narena:{type:String}//所在区域，例如球馆名\npersons:{type:Array}//球馆的活动者，需求更改数据库中的字段为circle\ncity:{type:String}//球馆所在的城市\nimg:{type:String}//球馆图片地址\nlatitude:{type:Number}//经度\nlongitude{type:Number}//纬度\ntable:{type:Number}//球桌数\ntime:{type:String}//开放时间\n")])])]),t("h4",{attrs:{id:"对话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对话","aria-hidden":"true"}},[n._v("#")]),n._v(" 对话")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("message:{type:Array,default:[]}//留言内容数组，存储留言的id\nmy_id:{type:String}//创建者的openId\nother_id:{type:String}//接收者的openId\n")])])]),t("h4",{attrs:{id:"留言信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#留言信息","aria-hidden":"true"}},[n._v("#")]),n._v(" 留言信息")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("id:{type:String}//主键，由数据库自动生成\nmsg:{type:String}//留言内容\nmy_id:{type:String}//创建者的openId\nother_id:{type:String}//接收者的openId\ntime:{type:Date}//时间戳\n")])])]),t("h2",{attrs:{id:"云函数读取数据库和部分前端实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#云函数读取数据库和部分前端实现","aria-hidden":"true"}},[n._v("#")]),n._v(" 云函数读取数据库和部分前端实现")]),n._v(" "),t("h3",{attrs:{id:"_1-引导页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-引导页","aria-hidden":"true"}},[n._v("#")]),n._v(" 1. 引导页")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567584852852_7d60ai2r8bt.gif/0",alt:""}})]),n._v(" "),t("p",[n._v("当第一次登陆进区就是如上所示，登陆进去后通过 openId 进行云函数获取数据库中个人信息，如果没有则默认进行注册流程。\n默认昵称为微信昵称（可在个人页更改），头像为微信头像（暂不提供更改），余下都为默认值。\n引导页 js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const QQMapWX = require('../../libs/qqmap-wx-jssdk.js');// 连接腾讯地图\nconst qqmapsdk = new QQMapWX({\n  key: 'HMGBZ-U5XCX-TUX4Y-ZPUH3-7RRX5-BZBCW'\n});\nconst app = getApp()\nPage({\n  data: {\n    login: false\n  },\n  getUserInfo(e) {\n    if (e.detail.userInfo && !this.data.login) {\n      console.log('登录中')\n      let the_first = false;\n      // 掉用获取用户信息函数，用openId作为唯一标识符\n      wx.cloud.callFunction({\n          name: \"getPersonInfo\",\n        })\n        .then(res => {\n          // 判断是否为空，空则代表第一次进入\n          if (res.result.data.length == 0) {\n            the_first = true\n          } else {\n            // 已经注册过，获取到信息放入 app.globalData 全局数据中。 \n            app.globalData.personInfo = res.result.data[0];\n            console.log(app.globalData.personInfo);\n            wx.cloud.callFunction({\n              name: \"getpingpang_info\",\n              success: res => {\n                console.log('登录成功')\n                // console.log(res.result.data)\n                app.globalData.ping_personInfo = res.result.data[0]\n                wx.setStorage({\n                  key: 'login',\n                  data: true\n                })\n                wx.switchTab({\n                  url: '../home/home',\n                })\n              }\n            })\n          }\n        }).then(() => {\n          // 进入注册流程，\n          return new Promise((resolve, reject) => {\n            if (the_first) {\n              // 获取用户的信息\n              wx.getUserInfo({\n                lang: \"zh_CN\",\n                success: res => {\n                  app.globalData.userInfo = res.userInfo;\n                  resolve();\n                },\n              })\n            }\n          })\n        })\n        .then(() => {\n          if (the_first) {\n            // 用户注册所需昵称和头像\n            const data = {\n              name: app.globalData.userInfo.nickName,\n              avatarUrl: app.globalData.userInfo.avatarUrl,\n            };\n            // 显示加载\n            wx.showLoading({\n              title: '授权登录中',\n            })\n            // 用户注册函数，除了昵称和头像，全置为最低或空\n            wx.cloud.callFunction({\n                name: \"pingpang_init\",\n                data: data\n              }).then(res => {\n                // 数据库已经注册完成\n                console.log(\"注册完成\")\n              })\n              .then(() => {\n                // 注册完成后获取一遍用户信息\n                wx.cloud.callFunction({\n                  name: \"getPersonInfo\"\n                }).then(res => {\n                  app.globalData.personInfo = res.result.data[0];\n                  console.log(res.result.data[0])\n                  // 隐藏加载\n                  app.globalData.ping_personInfo = {\n                    openId: app.globalData.personInfo.openId,\n                    phone: '***********',\n                    years: '0年',\n                    bat: '右手横拍',\n                    board: '新手用具',\n                    infront_rubber: '新手用具',\n                    behind_rubber: '新手用具'\n                  }\n                  wx.hideLoading();\n                  // 提示注册完成\n                  // wx.showModal({\n                  //   title: '注册',\n                  //   content: '注册完成',\n                  // })\n                  wx.setStorage({\n                    key: 'login',\n                    data: true\n                  })\n                  wx.switchTab({\n                    url: '../home/home',\n                  })\n                })\n              })\n          }\n        })\n    }\n  },\n  onLoad() {\n    wx.getStorage({\n      key: 'login',\n      success: (res) => {\n        if (res.data) {\n          this.setData({\n            login: true\n          })\n          app.timeout = setTimeout(() => {\n            wx.showLoading({\n              title: 'lodaing',\n            })\n          }, 3000)\n          app.neterror = setTimeout(() => {\n            wx.hideLoading()\n            wx.showModal({\n              title: '伤心提示',\n              content: '网络走丢了...',\n              showCancel: false\n            })\n          }, 20000)\n        }\n      }\n    })\n  }\n})\n")])])]),t("p",[n._v("以上流程可分为以下几步。")]),n._v(" "),t("h4",{attrs:{id:"_1-进行-onload-（页面加载完成）-生命周期-判断是否有缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-进行-onload-（页面加载完成）-生命周期-判断是否有缓存","aria-hidden":"true"}},[n._v("#")]),n._v(" 1. 进行 onLoad （页面加载完成） 生命周期 判断是否有缓存")]),n._v(" "),t("p",[n._v("首先调用 "),t("code",[n._v("wx.getStorage")]),n._v(" 查询收缓存的登陆信息，如果获取成功，跳过引导页，将当前登陆状态的标识符(默认false)改为 true 。\n通过 "),t("code",[n._v("setTimeout")]),n._v(" 来控制提示信息和超时检测。")]),n._v(" "),t("h4",{attrs:{id:"_2-未缓存，进入登陆注册功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-未缓存，进入登陆注册功能","aria-hidden":"true"}},[n._v("#")]),n._v(" 2. 未缓存，进入登陆注册功能")]),n._v(" "),t("p",[n._v("如果获取缓存中登陆状态。先获取授权信息 "),t("code",[n._v("getUserInfo")]),n._v(" 判断获取到的用户信息存在且为登录。")]),n._v(" "),t("p",[t("code",[n._v("the_first")]),n._v(" 判断是否是第一次进入要进行注册流程(保险作用).")]),n._v(" "),t("p",[n._v("调用"),t("strong",[n._v("云函数 "),t("code",[n._v("getPersonhInfo")])]),n._v(" ——获取用户信息，如果获取成功，结果集不为空，就将信息存储到全局状态 "),t("code",[n._v("app.globalData")]),n._v(" 中.接着调用"),t("strong",[n._v("云函数 "),t("code",[n._v("getpingpang_info")])]),n._v(" 获取个人详细信息一样放入全局状态中，然后写入缓存信息\n"),t("code",[n._v("wx.setStorage({key: 'login',data: true})")]),n._v("以便下次不用检验，最后通过 "),t("code",[n._v("wx.switchTab({url: '../home/home',})")]),n._v(" 来跳转到首页。")]),n._v(" "),t("p",[n._v("如果上一步未获取成功，判断为第一次登入，进入注册流程 先获取用户的昵称后头像，调用**云函数 "),t("code",[n._v("pingpang_init")]),n._v("**后台进行注册，并将初始值放入全局状态中，跳转到首页。")]),n._v(" "),t("h4",{attrs:{id:"所需云函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所需云函数","aria-hidden":"true"}},[n._v("#")]),n._v(" "),t("strong",[n._v("所需云函数")])]),n._v(" "),t("h4",{attrs:{id:"_1-getpersonhinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-getpersonhinfo","aria-hidden":"true"}},[n._v("#")]),n._v(" 1. getPersonhInfo")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst db = cloud.database();\nconst personinfo = db.collection(\"pingpang_personinfo\")\nconst _ = db.command;\n// 云函数入口函数\nexports.main = async(event, context) => {\n  let {\n    openIdarr,\n    openId,\n    all,\n    city\n  } = event;\n  if (all) {//获取所有人信息\n    return await personinfo.get()\n  } else if (city) {//获取所给城市的所有用户信息\n    return await personinfo.where({\n      city\n    }).get()\n  } else if (openIdarr) {//获取openId在所给数组中的所有用户信息\n    console.log(openIdarr)\n    return await personinfo.where({\n      openId: _.in(openIdarr)\n    }).get()\n  } else {//获取所给openId或自身的用户信息\n    return await personinfo.where({\n      openId: openId || event.userInfo.openId\n    }).get()\n  }\n}\n")])])]),t("p",[n._v("这个云函数是获取用户信息，\n首先解构用户传来的参数来判断需要的数据，openIdarr--通过openId数组获取，openId--通过openId获取，city--通过用户所在城市获取，all--获取所有用户，以上四种都没有则获取当前用户的信息。")]),n._v(" "),t("h4",{attrs:{id:"注：event-userinfo-openid-只有用户程序直接调用云函数的时候，云函数才可以获取到，当云函数调用云函数时，被调用的的云函数无法获取-userinfo-这个对象属性。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注：event-userinfo-openid-只有用户程序直接调用云函数的时候，云函数才可以获取到，当云函数调用云函数时，被调用的的云函数无法获取-userinfo-这个对象属性。","aria-hidden":"true"}},[n._v("#")]),n._v(" 注：event.userInfo.openId 只有用户程序直接调用云函数的时候，云函数才可以获取到，当云函数调用云函数时，被调用的的云函数无法获取 userInfo 这个对象属性。")]),n._v(" "),t("h4",{attrs:{id:"_2-getpingpang-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-getpingpang-info","aria-hidden":"true"}},[n._v("#")]),n._v(" 2. getpingpang_info")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\nconst db = cloud.database();\n// 云函数入口函数\nexports.main = async(event, context) => {\n  return await db.collection(\"pingpang_info\").where({\n    openId: event.openId || event.userInfo.openId\n  }).get()\n}\n")])])]),t("p",[n._v("这个云函数只是简单的通过两种方式(给与openId或默认自身)来获取获取用户详细信息")]),n._v(" "),t("h4",{attrs:{id:"_3-pingpang-init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-pingpang-init","aria-hidden":"true"}},[n._v("#")]),n._v(" 3. pingpang_init")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const fun1 = await cloud.callFunction({\n    name: \"addPersonInfo\",\n    data: {\n      openId: event.userInfo.openId,\n      name: event.name || \"未获取到名字\",\n      avatarUrl: event.avatarUrl,\n      city: event.city,//所在城市\n      level: \"新人\",\n      intergal: 0,\n      context: \"\",\n      activitiew: [],\n      circle: []\n    }\n  })\n  const fun2 = await cloud.callFunction({\n    name: \"addpingpang_info\",\n    data: {\n      openId: event.userInfo.openId,\n      phone: '***********',\n      years: '0年',\n      bat: '右手横拍',\n      board: '新手用具',\n      infront_rubber: '新手用具',\n      behind_rubber: '新手用具'\n    }\n  })\n  return { fun1, fun2 }\n}\n")])])]),t("p",[n._v("这个函数是初始化函数，功能是向数据库添加新用户的初始数据。")]),n._v(" "),t("h3",{attrs:{id:"_2-签到功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-签到功能","aria-hidden":"true"}},[n._v("#")]),n._v(" 2.签到功能")]),n._v(" "),t("p",[n._v("签到功能的页面并非我写的，所以我只能提供思路和云函数。\n签到的存储是在个人信息的一个字段sign中，以数组的形式存储，当点击签到时，先判断此次签到的月份与上次签到的月份(person的month字段)是否相同，不同则将sign数据置为空并且将month字段更新为当前月份，接着存储签到的日期的的day，")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567648409079_to4woj1fshn.gif/0",alt:""}})]),n._v(" "),t("h4",{attrs:{id:"云函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#云函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 云函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 云函数入口文件\nconst cloud = require(\'wx-server-sdk\')\n\ncloud.init()\nconst db = cloud.database();\nconst personInfo = db.collection("pingpang_personinfo")\n\n// 云函数入口函数\nexports.main = async(event, context) => {\n  let data = personInfo.where({\n    openId: event.openId || event.userInfo.openId\n  })\n  let info = await data.get()//先获取\n  let sign = info.data[0].sign || [] //放入新数组\n  //判断是否到了新的月份\n  if (info.data[0].month != new Date().getMonth()) {\n    sign = [];\n    var month = new Date().getMonth()\n  }\n  //替换数组\n  return await cloud.callFunction({\n    name: "setPersonInfo",\n    data: {\n      personInfo: {\n      //event.date是为了方便写管理调试用的一次性放日期数组\n      sign: sign.concat(event.date || [new Date().getDate()]),\n        month:month\n      }\n    }\n  })\n}\n')])])]),t("h3",{attrs:{id:"_3-排行榜单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-排行榜单","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.排行榜单")]),n._v(" "),t("p",[n._v("榜单十分简单，有多种做法：")]),n._v(" "),t("h4",{attrs:{id:"_1-第一种是将同城所有人查询出来按照积分排序，并区前一定数量的用户来输出排行榜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-第一种是将同城所有人查询出来按照积分排序，并区前一定数量的用户来输出排行榜","aria-hidden":"true"}},[n._v("#")]),n._v(" 1. 第一种是将同城所有人查询出来按照积分排序，并区前一定数量的用户来输出排行榜")]),n._v(" "),t("ul",[t("li",[n._v("优点：无需其他的资源来存储，不占用空间，修改排行榜的时候无需多余的处理")]),n._v(" "),t("li",[n._v("缺点：无法承载大量的用户，当用户增多到一定数量后，单次查询时间会变得很慢，查询并发数量会有问题，因为查询的都是同一张表")])]),n._v(" "),t("p",[n._v("所以这种方法只适用于用户量较少的情况下。")]),n._v(" "),t("h4",{attrs:{id:"_2-第二种是以城市排行榜为对象，创建一张表，表中存储的对象的属性大致如下所示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二种是以城市排行榜为对象，创建一张表，表中存储的对象的属性大致如下所示","aria-hidden":"true"}},[n._v("#")]),n._v(" 2. 第二种是以城市排行榜为对象，创建一张表，表中存储的对象的属性大致如下所示")]),n._v(" "),t("ul",[t("li",[n._v("优点：减少了查询后大量数据的处理，单人查询一次只需要处理相应数量的数据，不需要遍历一遍所有数据")]),n._v(" "),t("li",[n._v("缺点：需要额外的存储空间，如果存储的是用户 openId 那查询速度依然较慢，如果存储的是用户对象，那么查询速度只需要查询单张表的时间，修改排行榜的时候又需要单独处理数组字段，较为麻烦。")])]),n._v(" "),t("p",[n._v("这种方式使用用户量较大但是分散的情况，可以普遍使用。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("city:{\n    type:String\n},\n//存储排行榜，存储一定数量的用户openId，或者是用户对象\nlist:{\n    type:Array,\n    default:[]\n}，\nminIntergal:{\n    type:Number,\n    default:0\n}\n")])])]),t("h4",{attrs:{id:"_3-第三种则是以每个城市为一张表，存储积分达到排行榜对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-第三种则是以每个城市为一张表，存储积分达到排行榜对象","aria-hidden":"true"}},[n._v("#")]),n._v(" 3. 第三种则是以每个城市为一张表，存储积分达到排行榜对象")]),n._v(" "),t("ul",[t("li",[n._v("优点：有点是解决了处理数量的问题，并发问题也解决了，单个城市的人处理一张表，并发数量会下降。")]),n._v(" "),t("li",[n._v("缺点：大量占用空间")])]),n._v(" "),t("p",[n._v("这种做法适用于用户数量极大的时候。")]),n._v(" "),t("h4",{attrs:{id:"总体方案：从以上方法来说最好的方法是，在大量的用户的城市，做单独一张表来存储，剩余小型城市则存储在剩余的总表中，唯一的缺点就是判断处理的麻烦，当一个城市用户变多时，需要在数据库中添加一张新表，这需要手动来解决，变更后台的处理判断，可以使用策略模式来解决。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总体方案：从以上方法来说最好的方法是，在大量的用户的城市，做单独一张表来存储，剩余小型城市则存储在剩余的总表中，唯一的缺点就是判断处理的麻烦，当一个城市用户变多时，需要在数据库中添加一张新表，这需要手动来解决，变更后台的处理判断，可以使用策略模式来解决。","aria-hidden":"true"}},[n._v("#")]),n._v(" "),t("strong",[n._v("总体方案")]),n._v("：从以上方法来说最好的方法是，在大量的用户的城市，做单独一张表来存储，剩余小型城市则存储在剩余的总表中，唯一的缺点就是判断处理的麻烦，当一个城市用户变多时，需要在数据库中添加一张新表，这需要手动来解决，变更后台的处理判断，可以使用"),t("strong",[n._v("策略模式")]),n._v("来解决。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567648477099_egt5zypopq.gif/0",alt:""}})]),n._v(" "),t("h3",{attrs:{id:"_4-留言功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-留言功能","aria-hidden":"true"}},[n._v("#")]),n._v(" 4. 留言功能")]),n._v(" "),t("p",[n._v("留言功能,是这个小程序的主要功能之一，目的是为了向兴趣相同的乒乓爱好者有一个初始的交流平台。\n创建留言需要在圈友(同城的)中找到相应的用户，然后点击头像，弹出详情，接着点击留言按钮，会跳转到留言对话页。")]),n._v(" "),t("p",[n._v("留言有两种情况，一种是之前有过留言，存在留言对象，另一种则是第一次对话，之前不存在留言对象。\n第一种，只需要查询到存在就可向里面添加留言信息。第二种则需要先创建在进行添加。")]),n._v(" "),t("p",[n._v("第一种没有任何问题，直接对对话对象的留言数组中进行添加，第二种则需要创建一个对话对象。")]),n._v(" "),t("p",[t("strong",[n._v("具体流程")]),n._v("：首先在留言页查询到所有对话对象，这是走第一种情况，可以跳转到直接添加留言，第二种则是在圈友页中对象的详情页点击留言按钮，这会先查询对话兑现，不存在则会跳转到空白对话页，否则跳转到之前的留言对象。\n"),t("strong",[n._v("这种方法不是很好")])]),n._v(" "),t("p",[t("strong",[n._v("缺点如下")]),n._v("：")]),n._v(" "),t("ul",[t("li",[n._v("如果点击留言但是不留言，会创建一个空白的对话对象，用户存在误触按钮的情况，这会存在很多空白留言，这是一大缺陷。")]),n._v(" "),t("li",[n._v("因为这是前端来控制的所以存在一定的延迟，要进行多次异步的操作，造成延迟。")])]),n._v(" "),t("p",[t("strong",[n._v("推荐方案")]),n._v(" ：在点击留言时查询之前是否存在对话兑现，存在即读取，不存在就跳转到空白页，如果发送了留言，则创建对象。这样可已解决以上的缺点。但是还是存在一个问题就是未使用 "),t("strong",[n._v("socket")]),n._v(" 无法达成实时通信。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567648530555_mnm11jirt2.gif/0",alt:""}})]),n._v(" "),t("h4",{attrs:{id:"云函数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#云函数-2","aria-hidden":"true"}},[n._v("#")]),n._v(" 云函数")]),n._v(" "),t("ol",[t("li",[n._v("获取对话对象")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\nconst db = cloud.database();\nconst dialoguedb = db.collection(\"pingpang_dialogue\")\nconst _ = db.command;\n// 云函数入口函数\nexports.main = async (event, context) => {\n  let {\n    my_id,\n    other_id\n  } = event;\n  if (!my_id) my_id = event.userInfo.openId\n  // let data1 = await dialoguedb.where({\n  //   my_id,\n  //   other_id\n  // }).get()\n  if (!other_id) return await dialoguedb.where({\n    my_id\n  }).get()\n  return await dialoguedb.where({\n    my_id,\n    other_id\n  }).get()\n\n}\n\n  // console.log(data1)\n  // console.log('\\n',data2)\n  // return data2;\n")])])]),t("p",[n._v("云函数的大致功能为：\n首先，结构传递的参数"),t("strong",[n._v("my_id(当前用户的id)")]),n._v(" 和 "),t("strong",[n._v("other_id(留言对象的id)")]),n._v("。接着判断 "),t("strong",[n._v("my_id")]),n._v(" 是否存在，不存在就给当前用户的 "),t("strong",[n._v("openId")]),n._v(" ，最后判断 "),t("strong",[n._v("ohter_id")]),n._v(" 如果不存在，则查询前用户所有的对话。")]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[n._v("添加留言内容")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 云函数入口文件\nconst cloud = require(\'wx-server-sdk\')\n\ncloud.init();\nconst db = cloud.database();\nconst messagedb = db.collection("pingpang_message");\nconst dialoguedb = db.collection("pingpang_dialogue");\nconst _ = db.command;\n\n// 云函数入口函数\nexports.main = async(event, context) => {\n  let {\n    message,\n    my_id,\n    other_id,\n    msg\n  } = event;\n  console.log(other_id)\n  if (!my_id) my_id = event.userInfo.openId;\n  // console.log(other_id)\n  let message_id = await messagedb.add({\n    data: message || {\n      my_id,\n      other_id,\n      msg,\n      time: new Date()\n    }\n  })\n  // console.log(message_id)\n  const res = await cloud.callFunction({\n    name:"getpingpang_dialogue",\n    data:{\n      my_id:my_id,\n      other_id:other_id\n    }\n  })\n  let myTo = res.result.data[0];\n  await dialoguedb.doc(myTo._id).update({\n    data: {\n      message: myTo.message.concat([message_id._id])\n    }\n  })\n\n  const res1 = await cloud.callFunction({\n    name: "getpingpang_dialogue",\n    data: {\n      my_id: other_id,\n      other_id: my_id\n    }\n  })\n  let otherTo = res1.result.data[0];\n  await dialoguedb.doc(otherTo._id).update({\n    data: {\n      message: otherTo.message.concat([message_id._id])\n    }\n  })\n\n}\n')])])]),t("p",[n._v("上述的云函数功能大致为：\n首先，结构参数，"),t("strong",[n._v("message(留言对象，包含之后的几个参数)")]),n._v("，"),t("strong",[n._v("my_id")]),n._v("，"),t("strong",[n._v("other_id")]),n._v("和"),t("strong",[n._v("msg(留言内容)")]),n._v("。接着判断 "),t("strong",[n._v("my_id")]),n._v("是否存在，不存在就用当前用户的 "),t("strong",[n._v("openId")]),n._v(" 。然后是向留言表添加一条新数据 "),t("code",[n._v("messagedb.add")]),n._v(" 最后获取对话对象并向对话中的留言数组中添加留言内容。")]),n._v(" "),t("h3",{attrs:{id:"_5-个人模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-个人模块","aria-hidden":"true"}},[n._v("#")]),n._v(" 5. 个人模块")]),n._v(" "),t("p",[n._v("个人模块没有什么复杂的逻辑，就是数据渲染页面，不过页面结构是我写的，可以聊一聊页面了。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567648564589_hrxikrmlhzw.gif/0",alt:""}})]),n._v(" "),t("h4",{attrs:{id:"个人页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人页","aria-hidden":"true"}},[n._v("#")]),n._v(" 个人页")]),n._v(" "),t("p",[n._v("个人页面中没有什么比较花里胡哨的样式操作，只有简单基础的 css 和 html ，所以就在此简单结构一下。")]),n._v(" "),t("p",[n._v("大概要讲的就是点击切换成输入框的所需要讲的，还有下面的选择栏变变成"),t("strong",[n._v("组件")])]),n._v(" "),t("p",[n._v("页面(部分)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//个人简介\n<view class="infocard" bindtap=\'typeInfo\'>\n  <input type="text" wx:if="{{changecontext}}" placeholder=\'\' bindblur=\'setcontext\' focus=\'true\' value="{{personInfo.context}}" maxlength=\'18\'></input>\n        <view class="context" wx:else bindtap=\'changecontext\'>个性签名:{{personInfo.context}}</view>\n  </view>\n  \n  \n  //个人资料框\n  <view class="project collections" bindtap="ToPage" data-name="pingpang_info">\n      <image class="image" src="https://636f-coldday-67x7r-1259123272.tcb.qcloud.la/person.svg?sign=73135fcd2247e0a00ca78c131fa0d7d6&t=1559030458" />\n      <view class="title">个人资料</view>\n      <text class=\'cuIcon-right righticon text-grey\'></text>\n    </view>\n')])])]),t("p",[n._v("js(部分)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('data:{\n    changecontext: false\n}\nchangecontext() {\n    this.setData({\n      changecontext: true\n    })\n  },\n setcontext(event) {\n    this.setData({\n      changecontext: false\n    })\n    if (event.detail.value != "") {\n      this.setData({\n        "personInfo.context": event.detail.value,\n        context: event.detail.value\n      })\n    }\nelse {\n      this.setData({\n        "personInfo.context": "这家伙打完球后不留任何足迹",\n        context: "这家伙打完球后不留任何足迹"\n      })\n    }\n  },\nToPage(event) {\n    wx.navigateTo({\n      url: `../${event.currentTarget.dataset.name}/${event.currentTarget.dataset.name}`,\n      fail: () => {\n        wx.showModal({\n          title: \'(ಥ_ಥ)\',\n          content: \'敬请期待！\',\n          showCancel: false\n        })\n      }\n    })\n  },\n')])])]),t("p",[n._v("文本和输入框的切换，是通过 "),t("code",[n._v("wx:if")]),n._v(" 来控制显示，让两个大小近似的块占用相同的地方，当点击文本时，数据源(data)中的 changecontext 变量变成 ture 页面重新渲染，将输入框显示 value 为数据源中的个人简介，文本则隐藏；当输入框失去焦点时，将输入框中的value值写入数据源中，然后changecontext变为false，页面重新渲染，就改完了个人简介。")]),n._v(" "),t("p",[n._v("修改后提交数据的方案有三种")]),n._v(" "),t("ol",[t("li",[n._v("在修改完后直接提交")]),n._v(" "),t("li",[n._v("在页面隐藏或关闭后提交")]),n._v(" "),t("li",[n._v("在页面隐藏或关闭后，判断是否修改过内容，是则提交")])]),n._v(" "),t("p",[n._v("第一种和第三种都可以普遍使用。推荐第一种方式，因为大多数用户不会过于频繁的去修改这些东西，但是页面基本都是每次登陆都会访问多次的。频率和并发都是第一种好。")]),n._v(" "),t("h4",{attrs:{id:"个人详情"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人详情","aria-hidden":"true"}},[n._v("#")]),n._v(" 个人详情")]),n._v(" "),t("p",[n._v("个人详情就是普通的页面，没有复杂的云函数，只有一个获取，一个提交修改，两个函数都不复杂。")]),n._v(" "),t("p",[n._v("详情页中球拍和球龄是使用了小程序自带组件 "),t("strong",[n._v("picker")]),n._v(" 其余则是使用了自定义组件 "),t("strong",[n._v("info-section")])]),n._v(" "),t("p",[n._v("页面")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<view class="container">\n <view class="cu-form-group">\n\t\t<view class="title">球龄</view>\n\t\t<picker bindchange="PickerAgeChange" value="{{indexAge}}" range="{{pickerAge}}">\n\t\t\t<view id=\'picker\' class=\'picker\'>\n\t\t\t\t{{indexAge?pickerAge[indexAge]:personInfo.years}}<text class=\'cuIcon-title\' style=\'opacity:0\'></text>\n\t\t\t</view>\n\t\t</picker>\n\t</view>\n  <section title="电话" info="{{personInfo.phone}}" infoname="phone" bind:changend="getinfo" type=\'number\'/>\n  \x3c!-- <section title="球龄" info="{{personInfo.years}}" infoname="years" bind:changend="getinfo" type=\'number\'/> --\x3e\n  \x3c!-- <section title="持拍" info="{{personInfo.bat}}" infoname="bat" bind:changend="getinfo" /> --\x3e\n  <section title="使用底板" info="{{personInfo.board}}" infoname="board" bind:changend="getinfo" />\n  <section title="正手胶皮" info="{{personInfo.infront_rubber}}" infoname="infront_rubber" bind:changend="getinfo" />\n  <section title="反手胶皮" info="{{personInfo.behind_rubber}}" infoname="behind_rubber" bind:changend="getinfo" isbottom="true" />\n  <view class="cu-form-group">\n\t\t<view class="title">持拍</view>\n\t\t<picker bindchange="PickerChange" value="{{index}}" range="{{picker}}">\n\t\t\t<view id=\'picker\' class=\'picker\'>\n\t\t\t\t{{index?picker[index]:personInfo.bat || \'点击选择\'}}\n\t\t\t</view>\n\t\t</picker>\n\t</view>\n  <button  class=\'button\' bindtap="submit">点击提交</button>\n</view>  \n')])])]),t("p",[n._v("js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const app = getApp();\nPage({\n\n  /**\n   * 页面的初始数据\n   */\n  data: {\n    personInfo: {},\n    picker: ['右手横拍', '右手直拍', '左手横拍', '左手直拍']\n  },\n  PickerChange(e) {\n    let personInfo = this.data.personInfo;\n    this.setData({\n      index: e.detail.value\n    })\n    personInfo.bat = this.data.picker[this.data.index];\n    this.setData({personInfo})\n  },\n  PickerAgeChange(e) {\n    let personInfo = this.data.personInfo;\n    this.setData({\n      indexAge: e.detail.value\n    })\n    personInfo.years = this.data.pickerAge[this.data.indexAge];\n    this.setData({personInfo})\n  },\n  getinfo() {\n    this.setData({\n      personInfo: app.globalData.ping_personInfo,\n    })\n  },\n  submit() {\n    let personInfo = this.data.personInfo;\n    if(personInfo.phone.length != 11){\n      wx.showModal({\n        title: '提示',\n        content: '无效电话号码',\n        showCancel:false\n      })\n      personInfo.phone = '';\n      this.setData({\n        personInfo\n      })\n      return\n    }\n      const that = this;\n    console.log(\"开始提交\")\n    wx.showLoading({\n      title: '提交中',\n    })\n    let info = this.data.personInfo\n    wx.cloud.callFunction({\n      name: \"setpingpang_info\",\n      data: info\n    }).then(res => {\n      wx.hideLoading();\n      wx.showToast({\n        title: \"提交成功\",\n        duration: 1000,\n      })\n      console.log(res, \"修改成功\")\n      wx.navigateBack({\n\n      })\n    })\n  },\n  /**\n   * 生命周期函数--监听页面加载\n   */\n  onLoad: function (options) {\n    this.setData({\n      personInfo: app.globalData.ping_personInfo\n    })\n    let pickerAge = []\n    for (let i = 0; i < 51; i++) {\n      pickerAge.push(i + '年')\n    }\n    this.setData({ pickerAge })\n  }\n})\n")])])]),t("h5",{attrs:{id:"自定义组件-info-section"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件-info-section","aria-hidden":"true"}},[n._v("#")]),n._v(" 自定义组件 info-section")]),n._v(" "),t("p",[n._v("页面")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<view class=\"cu-form-group\">\n  <view class=\"title\">{{title}}</view>\n  <input type='{{type}}' wx:if=\"{{changeinfo}}\" bindblur='changend' value='{{info}}' placeholder=\"请输入信息\" focus='true'></input>\n  <view class='info' wx:else>\n    <input value='{{info?info:\"新手用具\"}}' disabled='true'></input>\n  </view>\n  <view class='icon-con' bindtap='changeinfo'>\n    <image src=\"https://636f-coldday-67x7r-1259123272.tcb.qcloud.la/change-1.png?sign=c8936111328dcb2ee416201369716380&t=1559030699\" class='icon'></image>\n  </view>\n</view>\n")])])]),t("p",[t("font",{attrs:{size:"3"}},[n._v("js")])],1),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// components/info-section/section.js\nComponent({\n  /**\n   * 组件的属性列表\n   */\n  properties: {\n    title: {\n      type: String,\n      value: "属性名"\n    },\n    info: {\n      type: String,\n      value: "属性值"\n    },\n    infoname: {\n      type: String,\n      value: ""\n    },\n    isbottom: {\n      type: Boolean,\n      value: false\n    },\n    type:{\n      type:String,\n      value:\'text\'\n    }\n  },\n\n  /**\n   * 组件的初始数据\n   */\n  data: {\n    changeinfo: false,\n  },\n\n  /**\n   * 组件的方法列表\n   */\n  methods: {\n    changeinfo() {\n      this.setData({\n        changeinfo: true\n      })\n      this.triggerEvent("changeinfo");\n    },\n    changend(event) {\n      this.setData({\n        changeinfo: false\n      })\n      getApp().globalData.ping_personInfo[this.properties.infoname] = event.detail.value\n      //抛出事件以便于父组件响应\n      this.triggerEvent("changend")\n    }\n  }\n})\n')])])]),t("p",[n._v("父子组件的通讯一定要注意在子组件中抛出事件，触发父组件的事件来达成。")]),n._v(" "),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),t("h2",{attrs:{id:"开发总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发总结","aria-hidden":"true"}},[n._v("#")]),n._v(" 开发总结")]),n._v(" "),t("p",[t("strong",[n._v("良好沟通的重要性")])]),n._v(" "),t("p",[n._v("在和朋友一起开发小程序的过程中注意到了以下的问题， "),t("strong",[n._v("沟通")]),n._v(" 是最重要的，在我们开发的过程中，因为没有良好的沟通，导致，前后端的功能开发对接不完美。部分功能分配不好，有些功能可以同过前端或后端单独解决，缺因为没有沟通完善，导致双方都做了或者双方都没做的情况发生，虽然有每个人都有自己的事，大多数时间都是单独开发的原因在。但是这些问题应当在代码开发流程就应当做的，这是我了解的一个问题。")]),n._v(" "),t("h2",{attrs:{id:"个人思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人思考","aria-hidden":"true"}},[n._v("#")]),n._v(" 个人思考")]),n._v(" "),t("h3",{attrs:{id:"程序的结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序的结构","aria-hidden":"true"}},[n._v("#")]),n._v(" 程序的结构")]),n._v(" "),t("p",[n._v("程序的结构大致分为前端页面、后端服务器和数据库三个组成部分。在小程序这种 MVVM 结构中前端占有了很重要的一部分。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://puui.qpic.cn/vupload/0/1567584980484_w2mf890bcel.png/0",alt:""}})]),n._v(" "),t("p",[n._v("前后端和数据库的比例大致为 n:1:1 的关系，所以当用户量大的程序，多数操作应当放在前端中处理，这是现在 mvvm 称为主流的原因，后台主要统筹管理总体数据或者对重要的流水数据处理，并且需要提供大量的 api 供前端获取数据，\n这样能大量缓解数据库的压力。")]),n._v(" "),t("h3",{attrs:{id:"关系型数据库和面向对象数据库的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库和面向对象数据库的对比","aria-hidden":"true"}},[n._v("#")]),n._v(" 关系型数据库和面向对象数据库的对比")]),n._v(" "),t("p",[n._v("关系型数据库是传统的数据库，现在使用的主要是mysql 和 microsoft sql server。面向对象数据库是新兴数据库，现在使用的是 mangoDB等。")]),n._v(" "),t("p",[n._v("关系型数据库中，最独特的也是最重要的是 "),t("strong",[n._v("规划范式")]),n._v(" 在关系型数据库中范式等级越高，数据的整体性越低，那么冗余度会逐渐下降。\n一个学生用户可能会被分成多张表来存储相关信息。而关系型数据库中主要的也是两张表之间的关系(联系)，这个关系通常也必须使用一张表来存储。")]),n._v(" "),t("p",[n._v("在面向对象数据库中，与传统关系型数据库最大的区别数，它是以一个对象来存储的，对象的属性则是自己定义的，它的属性可以存储一个对象(函数，数组)。这就极大的增加了可操作性，我们可以把关系作为对象的一个属性来存储，例如：学生和课程的关系，二者之间是多对多的关系，本来在关系型数据中需要建立一张选课表来存储，现在只需要在课程对象中添加一个选课字段存储选课学生的 id 数组，而在学生对象中添加一个所选课程字段，二者之间的关系就链接起来了。面向对象数据库中，对象的属性通常可以聚集在一起，一个对象类就是一张表，这样会造成每张表中拥有大量的数据每次操作会造成的并发问题，所以每个对象类最好将属性分割，让数据访问更加平均，减少每个对象表的同时访问次数。")]),n._v(" "),t("h2",{attrs:{id:"感想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#感想","aria-hidden":"true"}},[n._v("#")]),n._v(" 感想")]),n._v(" "),t("p",[n._v("在和他人一起，写小程序的时候出现种种问题，甚至有时候效率还没有一个人单独写的高，但是我发现和他人一起写会更有动力，每个人的想法在碰撞，能快速的提高自己的编程水平和与他人的沟通能力。")]),n._v(" "),t("h2",{attrs:{id:"源码链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码链接","aria-hidden":"true"}},[n._v("#")]),n._v(" 源码链接")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/colddayer/TTcircle",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/colddayer/TTcircle"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);