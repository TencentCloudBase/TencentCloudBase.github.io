(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{590:function(n,e,t){"use strict";t.r(e);var o=t(14),r=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("strong",[n._v("事件")]),n._v("是视图层到逻辑层的通信方式，当我们"),t("strong",[n._v("点击tap")]),n._v("、"),t("strong",[n._v("触摸touch")]),n._v("、"),t("strong",[n._v("长按longpress")]),n._v("小程序"),t("strong",[n._v("绑定了事件的组件")]),n._v("时，就会触发事件，执行逻辑层中对应的"),t("strong",[n._v("事件处理函数")]),n._v("。")]),n._v(" "),t("blockquote",[t("p",[n._v("小程序框架的视图层由 WXML 与 WXSS 来编写的，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。")])]),n._v(" "),t("h4",{attrs:{id:"页面滚动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面滚动"}},[n._v("#")]),n._v(" 页面滚动")]),n._v(" "),t("p",[n._v("使用开发者工具新建一个tapevent的页面（直接在app.json的pages配置项第一行添加一个tapevent的页面，由于是第一项，这样就可以成为小程序的首页呈现出来），然后将以下代码输入到tapevent.wxml文件里：")]),n._v(" "),n._v('"><button type="primary" bindtap="scrollToPosition">滚动到页面指定位置</button> extra-class">'),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('&lt;view class="pagetop" style="background-color:#333;width:100%;height:400px"&gt;&lt;/view&gt;\n&lt;button type="primary" bindtap="scrollToTop"&gt;滚动到页面顶部（返回顶部）&lt;/button&gt;\n&lt;view id="pageblock" style="background-color:#333;width:100%;height:400px"&gt;&lt;/view&gt;</pre>```\n这里的`type="primary"`只是引入weui给button添加的样式。而函数名scrollToPosition和scrollToTop是可以自己定义的，然后我们再来在相应的js文件里要添加和函数名scrollToPosition和scrollToTop对应的事件处理函数。\n\n在tapevent.js的Page({})里（也就是和`data:{}`、`onLoad: function (options) { }`等函数平级），输入以下代码：\n```<pre class="lang:js decode:true">  scrollToTop() {\n    wx.pageScrollTo({\n      scrollTop: 0,\n      duration: 300\n    })\n  },\n\n  scrollToPosition() {\n    wx.pageScrollTo({\n      scrollTop: 6000,\n      duration: 300\n    })\n  },</pre>```\n当用户点击该button组件的时候会在该页面对应的Page中找到相应的事件处理函数。保存编译之后，看看是不是就有了页面滚动的效果了？原理是scrollToTop()和scrollToPosition()这两个函数实际上都是调用了同一个小程序的**滚动API** wx.pageScrollTo()，关于该API的具体参数信息，我们可以查阅技术文档。\n\n**滚动API技术文档：**[wx.pageScrollTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html)\n\n在官方文档我们可以看到wx.pageScrollTo()的作用是将页面滚动到目标位置，支持选择器和滚动距离两种方式定位\n\n*   scrollTop滚动到页面的目标位置，单位 px，值为0就是滚动到顶部；值为600就是\n*   duration是滚动动画的时长，单位为ms，而1秒=1000毫秒\n那如何滚动到指定的选择器的位置呢？前面我们已经给view分别添加了id和class的选择器，只需要将之前的函数的配置信息<span style="color: #800000;">**修改**</span>为如下（<span style="color: #800000;">**注意哦，如果你是添加而不是修改，函数名会冲突的，或者你可以起其他的函数名**</span>）：\n```<pre class="lang:js decode:true">  scrollToTop() {\n    wx.pageScrollTo({\n      duration: 3000,\n      selector:".pagetop"\n    })\n  },\n\n  scrollToPosition() {\n    wx.pageScrollTo({\n      duration: 300,\n      selector:"#pageblock"\n    })\n  },</pre>```\n> **小任务：**如果只是在组件上绑定了事件也就是只有`bindtap="scrollToPosition"`，但是并没有在js文件里写相应的事件处理函数scrollToPosition，看一下控制台Console会报什么错？\n> 不要误以为只有button组件才可以绑定事件哦，还记得我们小程序组件里看的技术文档[小程序组件](https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html)吗？在公共属性部分，可以看到**所有组件都有以下属性bind* / catch***，这个属性的类型是EventHandler，bindtap就是bind*\b的一个类型。也就是说小程序的所有组件都可以通过以上方法触发事件处理函数，达到滚动等效果。使用button为案例只是为了便于展示而已。\n> **命名规范：**JavaScript的项目名、函数名、变量等都应该遵循简洁、语义化的原则。函数名推荐使用驼峰法来命名(**camelCase**)，比如scrollToTop、pageScrollTo，也就是由**小写字母开始**，**后续每个单词首字母都大写**，长得跟骆驼🐫的驼峰似的。\n\n#### 消息提示框Toast\n\n消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。在tapevent.wxml输入代码：\n```<pre class="lang:xhtml decode:true">&lt;button type="primary" bindtap="toastTap"&gt;点击弹出消息对话框&lt;/button&gt;</pre>```\n在js里输入以下代码：\n```<pre class="lang:js decode:true">  toastTap() {\n    wx.showToast({\n      title: \'购买成功\',\n      icon: \'success\',\n      duration: 2000\n    })\n  },\n</pre>```\n**消息提示技术文档：**[wx.showToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n*   title：为必填，提示的内容\n*   icon：只有三个选项，success、loading、none，大家可以自行测试一下三个不同取值的效果\n*   duration：提示延迟的时间，默认为1500毫秒，也就是1.5秒\n> **小任务：**修改title、icon和duration，以及添加image属性，看看会有什么样不同的表现形式，以及你在哪个App的何种场景下见过类似的消息提示信息？\n\n#### 模态对话框\n\n> 为了让界面显示的更加简洁，你可以使用快捷键Ctrl+/(Mac为Command+/)来将上面wxml里的代码注释掉，js文件里面的函数就不用注释啦\n使用开发者工具继续在tapevent.wxml文件里添加代码，这次我们会调用一下小程序的模态框（还是强调modalTap是你可以根据命名规范任意命名的，只需要在js里添加相应的事件处理函数就可以调用API）:\n```<pre class="lang:xhtml decode:true">&lt;button type="primary" bindtap="modalTap"&gt;显示模态对话框&lt;/button&gt;</pre>```\n然后再在tapevent.js中输入以下代码：\n```<pre class="lang:js decode:true">  modalTap() {\n    wx.showModal({\n      title: \'学习声明\',\n      content: \'学习小程序的开发是一件有意思的事情，我决定每天打卡学习\',\n      showCancel: true,\n      confirmText: \'确定\',\n      success(res) {\n        if (res.confirm) {\n          console.log(\'用户点击了确定\')\n        } else if (res.cancel) {\n          console.log(\'用户点击了取消\')\n        }\n      }\n    })\n  },</pre>```\n保存编译之后，点击模拟器上的按钮，就可以显示出一个对话框，这个对话框我们称之为Modal模态对话框。\n\n**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)\n\n**千变万化之API**\n\n阅读API的技术文档，就要了解该API有哪些属性，属性代表得是什么含义，属性是什么类型（**这一点非常重要**），以及它的默认值是什么，可以有哪些取值。\n\n*   title属性不是必填，删除title的赋值，就不会显示标题啦；\n*   content属性也不是必填，为提示的内容；\n*   showCancel默认值就是true，意思是默认显示取消按钮，改为false就不显示了\n*   confirmText默认值为确定，你可以改成别的试试\n通过给API已有的属性赋不同的值，API所展现的内容就会有很多种变化，而具体要怎么用，则需要你根据实际的小程序开发项目来使用了。\n> 小任务：在哪些App、小程序、H5(WebApp)你会看到模态框？这些模态框是在什么情况下出现的，它的作用是啥？你能模仿这些模态框写一下配置信息吗？\n**console.log日志打印**\n\n点击模态框上面的取消、确定按钮，留意一下开发者工具调试器Console的日志打印信息：当我们点击取消按钮时，会打印“用户点击了取消”；当我们点击确定按钮时，会打印“用户点击了确定”，而这打印的结果是由上面的这段代码输出的：\n```<pre class="lang:js decode:true">success(res) {\n  if (res.confirm) {\n    console.log(\'用户点击了确定\')\n  } else if (res.cancel) {\n    console.log(\'用户点击了取消\')\n  }\n}</pre>```\n那这段代码到底怎么理解呢？除了`console.log(\'用户点击了确定\')`，这个之前接触过可以理解外，res是什么？res.confirm、res.cancel是什么，从哪里来的？我们可以使用console.log()打印一下。将上面这段代码增加一些打印信息。\n```<pre class="lang:js decode:true">success(res) {\n  console.log(res)\n  if (res.confirm) {\n    console.log(res)\n    console.log("点击确认之后的res.confirm是：" + res.confirm)\n    console.log("点击确认之后的res.cancel是：" + res.cancel)\n  } else if (res.cancel) {\n    console.log(res)\n    console.log(\'用户点击了取消\')\n    console.log("点击取消之后的res.confirm是：" + res.confirm)\n    console.log("点击取消之后的res.cancel是：" + res.cancel)\n  }\n}</pre>```\n再来编译之后点击模态框的取消和确定按钮，看打印出来什么结果。当点击确认时，res.confirm的值为true，就执行if分支里的语句；当res.cancel的值为true，就执行res.cancel的语句。在**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)也有**object.success 回调函数**的说明。\n> **success、fail、complete回调函数 **在技术文档里可以看到属性里有success和fail两个回调函数，success为接口调用成功的回调函数；fail为接口调用失败的回调函数。关于这方面的知识大家可以阅读技术文档[小程序API](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API)，大致了解一下异步API与回调函数的参数，理解异步 API 的执行结果需要通过 `Object` 类型的参数中传入的对应回调函数获取。（不理解也没有关系）\n\n#### 手机振动\n\n手机振动API分两种，一种是长振动，一种是短振动，两个API写法大致相同，为了体验效果，我们以长振动为例，在tapevent.wxml里输入以下代码，\n```<pre class="lang:xhtml decode:true">&lt;button type="primary" bindtap="vibrateLong"&gt;长振动&lt;/button&gt;</pre>```\n然后再在tapevent.js里添加与之对应的事件处理函数：\n```<pre class="lang:js decode:true">  vibrateLong() {\n    wx.vibrateLong({\n      success(res) {\n        console.log(res)\n      },\n      fail(err) {\n        console.error(err)\n      },\n      complete() {\n        console.log(\'振动完成\')\n      }\n    })\n  },</pre>```\n保存编译之后，点击预览，使用手机扫描来体验一下长振动的效果。\n\n**长振动技术文档：**[wx.vibrateLong()](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html)\n\n在长振动技术文档里我们再次看到API里三个回调函数，success、fail、complete。在模拟器上点击按钮时，就可以看到打印日志。console.error向控制台的console中打印 error 日志，如果不能调用长振动，那一般是手机权限的问题了。\n> 小任务：参考长振动的代码以及[短振动的技术文档](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateShort.html)，写一个短振动的案例，体验一下两者有什么不同。\n<span style="font-size: 20px; font-weight: bold; color: #2b2b2b;">弹出操作菜单</span>\n\n下面我们来了解一下操作操作，在tapevent.wxml输入以下代码\n```<pre class="lang:xhtml decode:true">&lt;button type="default" bindtap="actionSheetTap"&gt;弹出操作菜单&lt;/button&gt;</pre>```\n然后再在tapevent.js里添加与之对应的事件处理函数：\n```<pre class="lang:js decode:true">  actionSheetTap() {\n    wx.showActionSheet({\n      itemList: [\'添加照片\', \'删除照片\', \'更新照片\', \'查询更多\'],\n      success(e) {\n        console.log(e.tapIndex)\n      }\n    })\n  },</pre>```\n**弹出菜单技术文档：**[wx.showActionSheet(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html)\n\n保存之后在模拟器体验，点击按钮就会弹出显示**添加照片**、**删除照片**、**更新照片**、**查询更多**等选项的操作菜单，当然我们点击操作菜单的选项之后是没有反应的，点击之后的反应还需要我们以后来写事件处理函数才行。\n\n**success回调函数**\n\n当我们点击操作菜单的不同选项时，会返回不同的数字，这取决于success回调函数里的e.tapIndex的值。在官方文档里我们可以了解到，当用户点击的按钮序号，从上到下的顺序，从0开始，相当于对应着数组itemList的序号，这样就为我们以后根据不同的菜单选项来执行不同的操作提供了可能。\n> **小任务：**在success(e){}回调函数里，添加console.log(e)打印e以及console.log(e.errMsg)打印e的errMsg对象看看是什么结果。\n\n#### 页面路由\n\n页面路由是一个非常重要的概念，打开新页面、页面返回、Tab页面切换、页面重定向等都是也能路由的不同方式。\n> 关于页面路由，大家可以阅读一下[页面路由技术文档](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html)，页面路由我们可以简单的理解为对页面链接的管理，根据不同的url链接来显示不同的内容和页面信息。在后面的章节我们还会具体讲一下页面路由的知识的，不必苛求一次性都搞明白。\n**Navigator组件与页面路由API**\n\n在前面我们已经学习过[Navigator组件](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)，在navigator组件的技术文档里，我们可以看到open-type属性以及合法值。在小程序API左侧也可以看到5个不同的API。它们之间的对应关系如下:\n<table class="table table-bordered table-striped">\n<thead>\n<tr>\n<th>**页面路由API**</th>\n<td>**Navigator open-type值**</td>\n<td style="text-align: center;">**含义**</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th> [redirectTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html)</th>\n<td>redirect</td>\n<td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</td>\n</tr>\n<tr>\n<th>[navigateTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)</th>\n<td>navigate</td>\n<td>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。</td>\n</tr>\n<tr>\n<th> [navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)</th>\n<td>navigateBack</td>\n<td>关闭当前页面，返回上一页面或多级页面。</td>\n</tr>\n<tr>\n<th> [switchTab](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html)</th>\n<td>switchTab</td>\n<td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td>\n</tr>\n<tr>\n<th>[reLaunch](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html)</th>\n<td>reLaunch</td>\n<td>关闭所有页面，打开到应用内的某个页面</td>\n</tr>\n</tbody>\n</table>\n也就是说Navigator组件可以做到的事情，使用JavaScript调用小程序也能路由API也可以做到。Navigator组件的内容是写死的，而JavaScript则可以提供动态的数据。\n\n**跳转到新页面与Tab页**\n\n我们可以在之前创建的home.wxml里输入以下代码：\n```<pre class="lang:xhtml decode:true">&lt;button bindtap="navigateTo"&gt;保留页面并跳转&lt;/button&gt;\n&lt;button bindtap="switchTab"&gt;跳转到组件Tab页&lt;/button&gt;\n&lt;button bindtap="redirectTo"&gt;关闭当前页面跳转&lt;/button&gt;</pre>```\n然后在home.js文件里添加以下代码：\n```<pre class="lang:js decode:true">navigateTo() {\n    wx.navigateTo({\n        url: \'/pages/home/imgshow/imgshow\'\n    })\n},\nswitchTab() {\n    wx.switchTab({\n        url: "/pages/list/list",\n    })\n},\nredirectTo() {\n    wx.redirectTo({\n        url: \'/pages/home/imgshow/imgshow\'\n    })\n},</pre>```\n保存之后在开发者工具的模拟器点击按钮，就实现了页面和Tab页的切换效果。在前面我们提到bintap是小程序所有组件的公有属性，只有bintap绑定了页面路由切换的事件处理函数，组件是不是Navigator也就不重要了，也就是链接跳转不再是Navigator组件的专利。\n> 注意这里的url的路径，我们使用的是相对于小程序根目录的绝对路径。app.json的pages配置项前面没有/是因为app.json本来就在根目录，所以可以使用相对路径以及这里的取值，以及API很多参数的字符串String类型的赋值，单引号和双引号都是没有影响的。\n**返回上一页**\n\n在home页面里的imgshow文件夹下的imgshow.wxml（在小程序开发的第一部分建过这个页面，如果没有，你再创建也可以）输入以下代码：\n')])]),n._v(" "),t("p",[t("code",[n._v('<pre class="lang:xhtml decode:true ">&lt;button bindtap="navigateBack"&gt;返回上一页&lt;/button&gt;</pre>')]),n._v("\n在imgshow.js里添加以下代码")]),n._v(" "),n._v(' ">navigateBack() { extra-class">'),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    wx.navigateBack({\n        delta: 1\n    })\n},</pre>```\n")])]),n._v(" "),t("p",[n._v("点击"),t("strong",[n._v("保留页面跳转按钮")]),n._v("以及"),t("strong",[n._v("返回上一页")]),n._v("按钮，这样我们就可以在小程序里通过点击组件实现了页面的切换与页面的返回。而如果是使用wx.redirectTo跳转到新的页面就没法使用返回上一页了。")]),n._v(" "),t("blockquote",[t("p",[n._v("wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);